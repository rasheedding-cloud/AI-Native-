import React, { useEffect, useState } from 'react';
import { Card, Table, Button, Modal, Form, Input, Select, Space, Popconfirm, message, Tag, Tabs, Progress, Checkbox, List } from 'antd';
import { PlusOutlined, EditOutlined, DeleteOutlined, EyeOutlined, UserOutlined, CalendarOutlined } from '@ant-design/icons';
import { useStore } from '../store';
import { taskApi, aiApi } from '../services/api';

const { TextArea } = Input;
const { Option } = Select;

const Tasks: React.FC = () => {
  const { tasks, projects, setTasks, addTask, updateTask, deleteTask, loading, setLoading, setError } = useStore();
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [editingTask, setEditingTask] = useState<any>(null);
  const [subtasksModalVisible, setSubtasksModalVisible] = useState(false);
  const [currentTask, setCurrentTask] = useState<any>(null);
  const [newSubtaskTitle, setNewSubtaskTitle] = useState('');
  const [form] = Form.useForm();
  const [activeTab, setActiveTab] = useState('1');

  useEffect(() => {
    loadTasks();
  }, []);

  const loadTasks = async () => {
    // 如果已经有数据，避免重复加载
    if (tasks.length > 0) {
      return;
    }

    try {
      setLoading(true);
      const response = await taskApi.getAll();
      setTasks(response.data || response);
    } catch (error) {
      setError('加载任务失败');
      message.error('加载任务失败');
    } finally {
      setLoading(false);
    }
  };

  const handleCreate = () => {
    setEditingTask(null);
    setIsModalVisible(true);
    form.resetFields();
  };

  const handleEdit = (task: any) => {
    setEditingTask(task);
    setIsModalVisible(true);
    form.setFieldsValue({
      ...task,
      dependencies: task.dependencies ? JSON.parse(task.dependencies) : [],
      kpiWeights: task.kpiWeights ? JSON.parse(task.kpiWeights) : {},
      riskFlags: task.riskFlags ? JSON.parse(task.riskFlags) : []
    });
  };

  const handleDelete = async (id: string) => {
    try {
      await taskApi.delete(id);
      deleteTask(id);
      message.success('删除成功');
    } catch (error) {
      message.error('删除失败');
    }
  };

  const handleSubmit = async (values: any) => {
    try {
      const taskData = {
        ...values,
        dependencies: values.dependencies && values.dependencies.length > 0 ? JSON.stringify(values.dependencies) : null,
        kpiWeights: values.kpiWeights && Object.keys(values.kpiWeights).length > 0 ? JSON.stringify(values.kpiWeights) : null,
        riskFlags: values.riskFlags && values.riskFlags.length > 0 ? JSON.stringify(values.riskFlags) : null
      };

      if (editingTask) {
        const response = await taskApi.update(editingTask.id, taskData);
        updateTask(editingTask.id, response.data || response);
        message.success('更新成功');
      } else {
        const response = await taskApi.create(taskData);
        addTask(response.data || response);
        message.success('创建成功');

        // 重新加载数据以确保同步
        setTimeout(() => {
          loadTasks();
        }, 500);
      }
      setIsModalVisible(false);
      form.resetFields();
    } catch (error) {
      message.error('操作失败');
    }
  };

  const handleStatusChange = async (taskId: string, newStatus: string) => {
    try {
      await taskApi.update(taskId, { status: newStatus });
      updateTask(taskId, { status: newStatus });
      message.success('状态更新成功');
    } catch (error) {
      message.error('状态更新失败');
    }
  };

  const handleAIPriority = async (task: any) => {
    try {
      const response = await aiApi.calculatePriority({
        taskId: task.id,
        kpiWeights: task.kpiWeights ? JSON.parse(task.kpiWeights) : {},
        urgency: task.priority,
        effort: task.estimate || 0,
        risk: task.riskFlags ? JSON.parse(task.riskFlags).length : 0,
        dependencyCriticality: task.dependencies ? JSON.parse(task.dependencies).length : 0,
        taskDescription: task.title + ' ' + task.description,
        assignee: task.assignee
      });

      await taskApi.update(task.id, {
        priority: (response.data || response).priority,
        aiReasoning: (response.data || response).reasoning
      });
      updateTask(task.id, {
        priority: (response.data || response).priority,
        aiReasoning: (response.data || response).reasoning
      });

      message.success('AI优先级计算完成');
    } catch (error) {
      message.error('AI优先级计算失败');
    }
  };

  const openSubtasksModal = (task: any) => {
    setCurrentTask(task);
    setSubtasksModalVisible(true);
    setNewSubtaskTitle('');
  };

  const addSubtask = async () => {
    if (!newSubtaskTitle.trim() || !currentTask) return;

    try {
      await taskApi.createSubtask(currentTask.id, {
        title: newSubtaskTitle.trim(),
        description: ''
      });

      // 重新加载任务数据
      loadTasks();
      setNewSubtaskTitle('');
      message.success('子任务添加成功');
    } catch (error) {
      message.error('子任务添加失败');
    }
  };

  const toggleSubtask = async (subtaskId: string, completed: boolean) => {
    try {
      await taskApi.updateSubtask(subtaskId, { completed: !completed });
      loadTasks(); // 重新加载任务数据
    } catch (error) {
      message.error('子任务状态更新失败');
    }
  };

  const deleteSubtask = async (subtaskId: string) => {
    try {
      await taskApi.deleteSubtask(subtaskId);
      loadTasks(); // 重新加载任务数据
      message.success('子任务删除成功');
    } catch (error) {
      message.error('子任务删除失败');
    }
  };

  const getStatusColor = (status: string) => {
    const colors: Record<string, string> = {
      '未开始': 'default',
      '进行中': 'processing',
      '已完成': 'success',
      '已暂停': 'warning',
      '已取消': 'error'
    };
    return colors[status] || 'default';
  };

  const getPriorityColor = (priority: number) => {
    if (priority >= 0.8) return 'red';
    if (priority >= 0.6) return 'orange';
    if (priority >= 0.4) return 'yellow';
    return 'blue';
  };

  const getSubtaskProgress = (task: any) => {
    if (!task.subtasks || task.subtasks.length === 0) return 0;
    const completedSubtasks = task.subtasks.filter((st: any) => st.completed).length;
    return Math.round((completedSubtasks / task.subtasks.length) * 100);
  };

  const columns = [
    {
      title: '任务标题',
      dataIndex: 'title',
      key: 'title',
      render: (text: string, record: any) => (
        <div>
          <strong>{text}</strong>
          {record.aiReasoning && (
            <div style={{ fontSize: '12px', color: '#666', marginTop: '4px' }}>
              AI: {record.aiReasoning}
            </div>
          )}
        </div>
      ),
    },
    {
      title: '所属项目',
      dataIndex: 'project',
      key: 'project',
      render: (project: any) => <Tag color="blue">{project?.name || '未知'}</Tag>,
    },
    {
      title: '负责人',
      dataIndex: 'assignee',
      key: 'assignee',
      render: (assignee: string) => assignee || <span style={{ color: '#999' }}>未分配</span>,
    },
    {
      title: '优先级',
      dataIndex: 'priority',
      key: 'priority',
      render: (priority: number, record: any) => (
        <div>
          <Tag color={getPriorityColor(priority)}>
            {(priority * 100).toFixed(0)}%
          </Tag>
          <Button
            type="link"
            size="small"
            onClick={() => handleAIPriority(record)}
            style={{ padding: 0, marginLeft: '4px' }}
          >
            AI计算
          </Button>
        </div>
      ),
    },
    {
      title: '状态',
      dataIndex: 'status',
      key: 'status',
      render: (status: string, record: any) => (
        <Select
          value={status}
          size="small"
          style={{ width: 100 }}
          onChange={(newStatus) => handleStatusChange(record.id, newStatus)}
        >
          <Option value="未开始">未开始</Option>
          <Option value="进行中">进行中</Option>
          <Option value="已完成">已完成</Option>
          <Option value="已暂停">已暂停</Option>
          <Option value="已取消">已取消</Option>
        </Select>
      ),
    },
    {
      title: '子任务进度',
      dataIndex: 'subtasks',
      key: 'subtaskProgress',
      render: (subtasks: any[], record: any) => (
        <div>
          <Progress
            percent={getSubtaskProgress(record)}
            size="small"
            status={getSubtaskProgress(record) === 100 ? 'success' : 'active'}
          />
          <div style={{ fontSize: '12px', color: '#666' }}>
            {subtasks?.filter((st: any) => st.completed).length || 0} / {subtasks?.length || 0}
          </div>
        </div>
      ),
    },
    {
      title: '依赖任务',
      dataIndex: 'dependencies',
      key: 'dependencies',
      render: (dependencies: string) => {
        if (!dependencies) return '-';
        try {
          const deps = JSON.parse(dependencies);
          return deps.length > 0 ? <Tag color="purple">{deps.length} 个依赖</Tag> : '-';
        } catch {
          return '-';
        }
      },
    },
    {
      title: '风险标记',
      dataIndex: 'riskFlags',
      key: 'riskFlags',
      render: (riskFlags: string) => {
        if (!riskFlags) return '-';
        try {
          const risks = JSON.parse(riskFlags);
          return risks.length > 0 ? <Tag color="red">{risks.length} 个风险</Tag> : '-';
        } catch {
          return '-';
        }
      },
    },
    {
      title: '截止日期',
      dataIndex: 'due',
      key: 'due',
      render: (due: string) => due ? new Date(due).toLocaleDateString() : '-',
    },
    {
      title: '操作',
      key: 'actions',
      render: (_: any, record: any) => (
        <Space>
          <Button
            type="link"
            icon={<EyeOutlined />}
            onClick={() => openSubtasksModal(record)}
          >
            子任务
          </Button>
          <Button
            type="link"
            icon={<EditOutlined />}
            onClick={() => handleEdit(record)}
          >
            编辑
          </Button>
          <Popconfirm
            title="确定要删除这个任务吗？"
            onConfirm={() => handleDelete(record.id)}
            okText="确定"
            cancelText="取消"
          >
            <Button type="link" danger icon={<DeleteOutlined />}>
              删除
            </Button>
          </Popconfirm>
        </Space>
      ),
    },
  ];

  // 按项目分组统计
  const tasksByProject = Array.isArray(tasks) ? tasks.reduce((acc, task) => {
    const projectName = task.project?.name || '未分类';
    if (!acc[projectName]) {
      acc[projectName] = [];
    }
    acc[projectName].push(task);
    return acc;
  }, {} as Record<string, any[]>) : {};

  const tabItems = [
    {
      key: '1',
      label: '列表视图',
      children: (
        <Table
          dataSource={Array.isArray(tasks) ? tasks : []}
          columns={columns}
          rowKey="id"
          loading={loading}
          pagination={{
            total: Array.isArray(tasks) ? tasks.length : 0,
            pageSize: 10,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total) => `共 ${total} 条记录`,
          }}
        />
      ),
    },
    {
      key: '2',
      label: '项目视图',
      children: (
        <div style={{ padding: '20px' }}>
          {Object.entries(tasksByProject).map(([projectName, projectTasks]) => (
            <Card
              key={projectName}
              title={<span><UserOutlined /> {projectName}</span>}
              style={{ marginBottom: '16px' }}
              extra={<Tag color="blue">{projectTasks.length} 个任务</Tag>}
            >
              <List
                dataSource={projectTasks}
                renderItem={(task) => (
                  <List.Item
                    key={task.id}
                    actions={[
                      <Button type="link" size="small" onClick={() => openSubtasksModal(task)}>
                        子任务
                      </Button>,
                      <Button type="link" size="small" onClick={() => handleEdit(task)}>
                        编辑
                      </Button>,
                    ]}
                  >
                    <List.Item.Meta
                      title={
                        <div>
                          {task.title}
                          <Tag color={getStatusColor(task.status)} style={{ marginLeft: '8px' }}>
                            {task.status}
                          </Tag>
                          <Tag color={getPriorityColor(task.priority)} style={{ marginLeft: '4px' }}>
                            {(task.priority * 100).toFixed(0)}%
                          </Tag>
                        </div>
                      }
                      description={
                        <div>
                          <p>{task.description || '暂无描述'}</p>
                          <div style={{ display: 'flex', alignItems: 'center', gap: '16px', fontSize: '12px', color: '#666' }}>
                            <span><UserOutlined /> {task.assignee || '未分配'}</span>
                            <span><CalendarOutlined /> {task.due ? new Date(task.due).toLocaleDateString() : '无截止日期'}</span>
                            <span>子任务: {task.subtasks?.filter((st: any) => st.completed).length || 0} / {task.subtasks?.length || 0}</span>
                          </div>
                          <Progress
                            percent={getSubtaskProgress(task)}
                            size="small"
                            style={{ marginTop: '8px' }}
                          />
                        </div>
                      }
                    />
                  </List.Item>
                )}
              />
            </Card>
          ))}
        </div>
      ),
    },
    {
      key: '3',
      label: '统计视图',
      children: (
        <div style={{ padding: '20px' }}>
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '16px', marginBottom: '24px' }}>
            <Card>
              <div style={{ textAlign: 'center' }}>
                <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#1890ff' }}>
                  {Array.isArray(tasks) ? tasks.length : 0}
                </div>
                <div style={{ color: '#666' }}>总任务数</div>
              </div>
            </Card>
            <Card>
              <div style={{ textAlign: 'center' }}>
                <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#52c41a' }}>
                  {Array.isArray(tasks) ? tasks.filter(t => t.status === '已完成').length : 0}
                </div>
                <div style={{ color: '#666' }}>已完成</div>
              </div>
            </Card>
            <Card>
              <div style={{ textAlign: 'center' }}>
                <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#faad14' }}>
                  {Array.isArray(tasks) ? tasks.filter(t => t.status === '进行中').length : 0}
                </div>
                <div style={{ color: '#666' }}>进行中</div>
              </div>
            </Card>
            <Card>
              <div style={{ textAlign: 'center' }}>
                <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#722ed1' }}>
                  {Array.isArray(tasks) ? tasks.filter(t => t.priority >= 0.7).length : 0}
                </div>
                <div style={{ color: '#666' }}>高优先级</div>
              </div>
            </Card>
          </div>

          <Card title="任务状态分布">
            <div style={{ display: 'flex', justifyContent: 'space-around', alignItems: 'center' }}>
              {Object.entries(
                Array.isArray(tasks) ? tasks.reduce((acc, task) => {
                  acc[task.status] = (acc[task.status] || 0) + 1;
                  return acc;
                }, {} as Record<string, number>) : {}
              ).map(([status, count]) => (
                <div key={status} style={{ textAlign: 'center' }}>
                  <div style={{ fontSize: '18px', fontWeight: 'bold' }}>{count}</div>
                  <Tag color={getStatusColor(status)}>{status}</Tag>
                </div>
              ))}
            </div>
          </Card>
        </div>
      ),
    },
  ];

  return (
    <div>
      <Card
        title={(
          <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
            <span style={{ fontSize: '24px' }}>✅</span>
            <span>任务管理</span>
            <Tag color="orange" style={{ fontSize: '12px' }}>
              {Array.isArray(tasks) ? tasks.length : 0} 个任务
            </Tag>
          </div>
        )}
        extra={
          <Space wrap>
            <Input.Search
              placeholder="搜索任务..."
              style={{ width: 200 }}
              onSearch={(value) => console.log('搜索:', value)}
              allowClear
              size="middle"
            />
            <Button
              type="primary"
              icon={<PlusOutlined />}
              onClick={handleCreate}
              size="middle"
              style={{
                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                border: 'none',
                boxShadow: '0 4px 12px rgba(102, 126, 234, 0.3)',
                transition: 'all 0.3s ease'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.transform = 'translateY(-2px)';
                e.currentTarget.style.boxShadow = '0 6px 16px rgba(102, 126, 234, 0.4)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = '0 4px 12px rgba(102, 126, 234, 0.3)';
              }}
            >
              创建任务
            </Button>
          </Space>
        }
        style={{
          boxShadow: '0 4px 16px rgba(0,0,0,0.1)',
          borderRadius: 12,
          border: 'none',
          overflow: 'hidden'
        }}
      >
        <Tabs
          activeKey={activeTab}
          onChange={setActiveTab}
          items={tabItems}
          style={{ marginTop: 16 }}
          className="custom-tabs"
        />
      </Card>

      {/* 创建/编辑任务模态框 */}
      <Modal
        title={editingTask ? '编辑任务' : '创建任务'}
        open={isModalVisible}
        onCancel={() => setIsModalVisible(false)}
        footer={null}
        width={{ xs: '90%', sm: '80%', md: 800 }}
        style={{
          top: 20,
          borderRadius: 12,
          overflow: 'hidden'
        }}
        styles={{
          body: {
            padding: '24px',
            background: '#fafafa',
            maxHeight: '80vh',
            overflowY: 'auto'
          }
        }}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          style={{ maxWidth: '100%' }}
        >
          <Form.Item
            label="任务标题"
            name="title"
            rules={[{ required: true, message: '请输入任务标题' }]}
          >
            <Input
              placeholder="请输入任务标题"
              size="large"
              style={{
                borderRadius: 8,
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                border: '1px solid #d9d9d9',
                transition: 'all 0.3s ease'
              }}
              onFocus={(e) => {
                e.currentTarget.style.borderColor = '#667eea';
                e.currentTarget.style.boxShadow = '0 0 0 2px rgba(102, 126, 234, 0.2)';
              }}
              onBlur={(e) => {
                e.currentTarget.style.borderColor = '#d9d9d9';
                e.currentTarget.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
              }}
            />
          </Form.Item>

          <Form.Item
            label="任务描述"
            name="description"
            rules={[{ required: false }]}
          >
            <TextArea
              rows={3}
              placeholder="请输入任务描述（可选）"
              style={{
                borderRadius: 8,
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                border: '1px solid #d9d9d9',
                transition: 'all 0.3s ease'
              }}
              onFocus={(e) => {
                e.currentTarget.style.borderColor = '#667eea';
                e.currentTarget.style.boxShadow = '0 0 0 2px rgba(102, 126, 234, 0.2)';
              }}
              onBlur={(e) => {
                e.currentTarget.style.borderColor = '#d9d9d9';
                e.currentTarget.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
              }}
            />
          </Form.Item>

          <Form.Item
            label="所属项目"
            name="projectId"
            rules={[{ required: true, message: '请选择所属项目' }]}
          >
            <Select
              placeholder="请选择所属项目"
              size="large"
              style={{
                borderRadius: 8,
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                border: '1px solid #d9d9d9',
                transition: 'all 0.3s ease'
              }}
              onFocus={(e) => {
                e.currentTarget.style.borderColor = '#667eea';
                e.currentTarget.style.boxShadow = '0 0 0 2px rgba(102, 126, 234, 0.2)';
              }}
              onBlur={(e) => {
                e.currentTarget.style.borderColor = '#d9d9d9';
                e.currentTarget.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
              }}
            >
              {projects.map((project) => (
                <Option key={project.id} value={project.id}>
                  {project.name}
                </Option>
              ))}
            </Select>
          </Form.Item>

          <Form.Item
            label="负责人"
            name="assignee"
            rules={[{ required: false }]}
          >
            <Input
              placeholder="请输入负责人（可选）"
              size="large"
              style={{
                borderRadius: 8,
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                border: '1px solid #d9d9d9',
                transition: 'all 0.3s ease'
              }}
              onFocus={(e) => {
                e.currentTarget.style.borderColor = '#667eea';
                e.currentTarget.style.boxShadow = '0 0 0 2px rgba(102, 126, 234, 0.2)';
              }}
              onBlur={(e) => {
                e.currentTarget.style.borderColor = '#d9d9d9';
                e.currentTarget.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
              }}
            />
          </Form.Item>

          <Form.Item
            label="优先级"
            name="priority"
            rules={[{ required: true, message: '请输入优先级' }]}
            initialValue={0.5}
          >
            <Input
              type="number"
              min={0}
              max={1}
              step={0.1}
              placeholder="0-1之间的数值"
              size="large"
              style={{
                borderRadius: 8,
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                border: '1px solid #d9d9d9',
                transition: 'all 0.3s ease'
              }}
              onFocus={(e) => {
                e.currentTarget.style.borderColor = '#667eea';
                e.currentTarget.style.boxShadow = '0 0 0 2px rgba(102, 126, 234, 0.2)';
              }}
              onBlur={(e) => {
                e.currentTarget.style.borderColor = '#d9d9d9';
                e.currentTarget.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
              }}
            />
          </Form.Item>

          <Form.Item
            label="预估工时（天）"
            name="estimate"
            rules={[{ required: false }]}
          >
            <Input
              type="number"
              min={0}
              step={0.5}
              placeholder="请输入预估工时"
              size="large"
              style={{
                borderRadius: 8,
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                border: '1px solid #d9d9d9',
                transition: 'all 0.3s ease'
              }}
              onFocus={(e) => {
                e.currentTarget.style.borderColor = '#667eea';
                e.currentTarget.style.boxShadow = '0 0 0 2px rgba(102, 126, 234, 0.2)';
              }}
              onBlur={(e) => {
                e.currentTarget.style.borderColor = '#d9d9d9';
                e.currentTarget.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
              }}
            />
          </Form.Item>

          <Form.Item
            label="依赖任务"
            name="dependencies"
            rules={[{ required: false }]}
          >
            <Select
              mode="multiple"
              placeholder="选择依赖的任务（可选）"
              size="large"
              style={{
                borderRadius: 8,
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                border: '1px solid #d9d9d9',
                transition: 'all 0.3s ease'
              }}
              onFocus={(e) => {
                e.currentTarget.style.borderColor = '#667eea';
                e.currentTarget.style.boxShadow = '0 0 0 2px rgba(102, 126, 234, 0.2)';
              }}
              onBlur={(e) => {
                e.currentTarget.style.borderColor = '#d9d9d9';
                e.currentTarget.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
              }}
            >
              {Array.isArray(tasks) ? tasks.filter(t => !editingTask || t.id !== editingTask.id).map((task) => (
                <Option key={task.id} value={task.id}>
                  {task.title} - {task.project?.name || '未分类'}
                </Option>
              )) : []}
            </Select>
          </Form.Item>

          <Form.Item
            label="KPI权重设置"
            name="kpiWeights"
            rules={[{ required: false }]}
          >
            <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
              {[
                { key: 'trialConversion', label: '体验课转化率', color: 'blue' },
                { key: 'materialCompletion', label: '教材完成度', color: 'green' },
                { key: 'roi', label: 'ROI', color: 'gold' },
                { key: 'renewalRate', label: '续费率', color: 'purple' },
                { key: 'referralRate', label: '转介绍率', color: 'orange' }
              ].map(kpi => (
                <div key={kpi.key} style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                  <Tag color={kpi.color} style={{ minWidth: '80px', textAlign: 'center' }}>
                    {kpi.label}
                  </Tag>
                  <Input
                    type="number"
                    min={0}
                    max={1}
                    step={0.1}
                    placeholder="0.0-1.0"
                    style={{ width: '100px' }}
                    onChange={(e) => {
                      const weights = form.getFieldValue('kpiWeights') || {};
                      form.setFieldsValue({
                        kpiWeights: {
                          ...weights,
                          [kpi.key]: parseFloat(e.target.value) || 0
                        }
                      });
                    }}
                  />
                  <span style={{ color: '#666', fontSize: '12px' }}>
                    权重: {(form.getFieldValue('kpiWeights')?.[kpi.key] || 0).toFixed(1)}
                  </span>
                </div>
              ))}
            </div>
          </Form.Item>

          <Form.Item
            label="风险标记"
            name="riskFlags"
            rules={[{ required: false }]}
          >
            <Select
              mode="multiple"
              placeholder="选择风险标记（可选）"
              size="large"
              style={{
                borderRadius: 8,
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                border: '1px solid #d9d9d9',
                transition: 'all 0.3s ease'
              }}
              onFocus={(e) => {
                e.currentTarget.style.borderColor = '#667eea';
                e.currentTarget.style.boxShadow = '0 0 0 2px rgba(102, 126, 234, 0.2)';
              }}
              onBlur={(e) => {
                e.currentTarget.style.borderColor = '#d9d9d9';
                e.currentTarget.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
              }}
            >
              <Option value="技术风险">技术风险</Option>
              <Option value="时间风险">时间风险</Option>
              <Option value="资源风险">资源风险</Option>
              <Option value="合规风险">合规风险</Option>
              <Option value="质量风险">质量风险</Option>
            </Select>
          </Form.Item>

          <Form.Item
            label="截止日期"
            name="due"
            rules={[{ required: false }]}
          >
            <Input
              type="date"
              size="large"
              style={{
                borderRadius: 8,
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                border: '1px solid #d9d9d9',
                transition: 'all 0.3s ease'
              }}
              onFocus={(e) => {
                e.currentTarget.style.borderColor = '#667eea';
                e.currentTarget.style.boxShadow = '0 0 0 2px rgba(102, 126, 234, 0.2)';
              }}
              onBlur={(e) => {
                e.currentTarget.style.borderColor = '#d9d9d9';
                e.currentTarget.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
              }}
            />
          </Form.Item>

          <Form.Item
            label="任务状态"
            name="status"
            rules={[{ required: true, message: '请选择任务状态' }]}
            initialValue="未开始"
          >
            <Select
              placeholder="请选择任务状态"
              size="large"
              style={{
                borderRadius: 8,
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                border: '1px solid #d9d9d9',
                transition: 'all 0.3s ease'
              }}
              onFocus={(e) => {
                e.currentTarget.style.borderColor = '#667eea';
                e.currentTarget.style.boxShadow = '0 0 0 2px rgba(102, 126, 234, 0.2)';
              }}
              onBlur={(e) => {
                e.currentTarget.style.borderColor = '#d9d9d9';
                e.currentTarget.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
              }}
            >
              <Option value="未开始">未开始</Option>
              <Option value="进行中">进行中</Option>
              <Option value="已完成">已完成</Option>
              <Option value="已暂停">已暂停</Option>
              <Option value="已取消">已取消</Option>
            </Select>
          </Form.Item>

          <Form.Item>
            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>
              <Button
                onClick={() => setIsModalVisible(false)}
                size="large"
                style={{
                  borderRadius: 8,
                  padding: '8px 24px',
                  border: '1px solid #d9d9d9',
                  transition: 'all 0.3s ease'
                }}
              >
                取消
              </Button>
              <Button
                type="primary"
                htmlType="submit"
                size="large"
                style={{
                  borderRadius: 8,
                  padding: '8px 24px',
                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                  border: 'none',
                  boxShadow: '0 4px 12px rgba(102, 126, 234, 0.3)',
                  transition: 'all 0.3s ease'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = 'translateY(-2px)';
                  e.currentTarget.style.boxShadow = '0 6px 16px rgba(102, 126, 234, 0.4)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = 'translateY(0)';
                  e.currentTarget.style.boxShadow = '0 4px 12px rgba(102, 126, 234, 0.3)';
                }}
              >
                {editingTask ? '更新' : '创建'}
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>

      {/* 子任务管理模态框 */}
      <Modal
        title={`子任务管理 - ${currentTask?.title || ''}`}
        open={subtasksModalVisible}
        onCancel={() => setSubtasksModalVisible(false)}
        footer={null}
        width={{ xs: '90%', sm: '80%', md: 600 }}
        style={{
          top: 20,
          borderRadius: 12,
          overflow: 'hidden'
        }}
        styles={{
          body: {
            padding: '24px',
            background: '#fafafa'
          }
        }}
      >
        {currentTask && (
          <div>
            <div style={{ marginBottom: '16px' }}>
              <Input
                placeholder="添加新子任务"
                value={newSubtaskTitle}
                onChange={(e) => setNewSubtaskTitle(e.target.value)}
                onPressEnter={addSubtask}
                size="large"
                style={{
                  borderRadius: 8,
                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                  border: '1px solid #d9d9d9',
                  transition: 'all 0.3s ease'
                }}
                onFocus={(e) => {
                  e.currentTarget.style.borderColor = '#667eea';
                  e.currentTarget.style.boxShadow = '0 0 0 2px rgba(102, 126, 234, 0.2)';
                }}
                onBlur={(e) => {
                  e.currentTarget.style.borderColor = '#d9d9d9';
                  e.currentTarget.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
                }}
                suffix={
                  <Button
                    type="primary"
                    size="small"
                    onClick={addSubtask}
                    style={{
                      borderRadius: 6,
                      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                      border: 'none',
                      transition: 'all 0.3s ease'
                    }}
                  >
                    添加
                  </Button>
                }
              />
            </div>

            <List
              dataSource={currentTask.subtasks || []}
              renderItem={(subtask: any) => (
                <List.Item
                  key={subtask.id}
                  actions={[
                    <Button
                      type="link"
                      danger
                      size="small"
                      onClick={() => deleteSubtask(subtask.id)}
                    >
                      删除
                    </Button>
                  ]}
                >
                  <List.Item.Meta
                    avatar={
                      <Checkbox
                        checked={subtask.completed}
                        onChange={() => toggleSubtask(subtask.id, subtask.completed)}
                      />
                    }
                    title={
                      <span style={{
                        textDecoration: subtask.completed ? 'line-through' : 'none',
                        color: subtask.completed ? '#999' : 'inherit'
                      }}>
                        {subtask.title}
                      </span>
                    }
                    description={subtask.description}
                  />
                </List.Item>
              )}
            />
          </div>
        )}
      </Modal>
      <style>{`
        .custom-tabs .ant-tabs-nav {
          margin-bottom: 16px;
        }

        .custom-tabs .ant-tabs-tab {
          border-radius: 8px 8px 0 0;
          transition: all 0.3s ease;
        }

        .custom-tabs .ant-tabs-tab:hover {
          color: #667eea;
          background: rgba(102, 126, 234, 0.1);
        }

        .custom-tabs .ant-tabs-tab-active {
          color: #667eea;
          border-bottom: 2px solid #667eea;
        }

        .ant-card {
          border-radius: 12px;
          overflow: hidden;
          transition: all 0.3s ease;
        }

        .ant-card:hover {
          box-shadow: 0 8px 24px rgba(0,0,0,0.15);
        }

        .ant-list-item {
          border-radius: 8px;
          margin-bottom: 8px;
          transition: all 0.3s ease;
        }

        .ant-list-item:hover {
          background: rgba(102, 126, 234, 0.05);
        }

        .ant-progress-circle .ant-progress-text {
          font-size: 16px;
          font-weight: bold;
        }

        .ant-select-selection {
          border-radius: 8px !important;
        }

        @media (max-width: 768px) {
          .ant-card {
            margin: 8px;
          }

          .ant-modal {
            margin: 16px;
          }

          .ant-card-grid {
            width: 100% !important;
          }

          .ant-list-item {
            padding: 12px 8px;
          }
        }
      `}</style>
    </div>
  );
};

export default Tasks;